version: '3.8'

services:
  # PHP-FPM service
  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_api_php
    volumes:
      - ./:/var/www/html
    # If you want to run Composer or Symfony commands inside this container,
    # you may want to override the entrypoint or attach a shell. For now, keep it simple.

  # Web server (Nginx or Caddy). Let's use Nginx as an example:
  web:
    image: nginx:stable-alpine
    container_name: my_api_web
    depends_on:
      - php
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: my_api_db
    environment:
      POSTGRES_USER: symfony
      POSTGRES_PASSWORD: symfony
      POSTGRES_DB: symfony_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  postgres_data:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
